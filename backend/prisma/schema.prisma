// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  firstname     String?
  lastname      String?
  username      String         @unique
  email         String         @unique
  passwordHash  String
  refreshToken  String
  verified      Boolean        @default(false)
  roles         Role[]         @default([USER])
  avatar        Avatar?
  orders        Order[]
  cart          Cart?
  feedbacks     Feedback[]
  likedProducts LikedProduct[]
  createdAt     DateTime?      @default(now())
  updatedAt     DateTime?

  @@map("users")
}

model Avatar {
  id     Int    @id @default(autoincrement())
  src    String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int    @unique

  @@map("avatars")
}

model Product {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  price          Decimal
  description    String?
  unit           Unit
  carts          ProductOnCart[]
  feedbacks      Feedback[]
  ProductOnOrder ProductOnOrder[]
  likes          LikedProduct[]
  status          ProductStatus
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @default(now())
  category       Category         @relation(fields: [categoryId], references: [id])
  categoryId     Int

  @@map("products")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  @@map("categories")
}

model Cart {
  id        Int             @id @default(autoincrement())
  userId    Int             @unique
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products  ProductOnCart[]
  createdAt DateTime?       @default(now())
  updatedAt DateTime?

  @@map("carts")
}

model Order {
  id             Int              @id @default(autoincrement())
  userId         Int
  user           User             @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  total          Decimal
  type           OrderType
  payment        Payment
  ProductOnOrder ProductOnOrder[]
  Table          Table?           @relation(fields: [tableId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  tableId        Int?
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @default(now())

  @@map("orders")
}

model Feedback {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id], onDelete: SetDefault, onUpdate: Cascade)
  score     Int
  comment   String
  productId Int
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  @@map("feedbacks")
}

model Table {
  id       Int     @id @default(autoincrement())
  name     String
  occupied Boolean
  orders   Order[]

  @@map("tables")
}

model ProductOnCart {
  id        Int     @id @default(autoincrement())
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quantity  Int

  @@map("products_on_carts")
}

model LikedProduct {
  id        Int     @id @default(autoincrement())
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])

  @@map("liked_products")
}

model ProductOnOrder {
  id        Int     @id @default(autoincrement())
  orderId   Int
  order     Order   @relation(fields: [orderId], references: [id])
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  quantity  Float

  @@map("products_on_orders")
}

enum OrderType {
  DELIVERY
  PICKUP
  PLACE
}

enum Payment {
  CASH
  CARD
  CREDIT
}

enum Role {
  SUPERADMIN
  USER
  ADMIN
  WAITER
  EMPLOYEE
  CUSTOMER
  MODERATOR
}

enum ProductStatus {
  INSTOCK
  LOWSTOCK
  OUTOFSTOCK
}

enum Unit {
  KILO
  PIECE
  PORTION
  LITER
}
